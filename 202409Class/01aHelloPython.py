# 한줄(라인단위) 주석은 샵# 을 사용한다. 

'''
블럭단위 주석은 싱글쿼테이션 3개를 연결해서 만들 수 있다. 
주석에 들어간 모든 내용은 실행에서 제외된다. 
'''

'''문장을 적당히 쓰세요. 그리고 주석설정을 해봅시다. 
블럭으로 감싼후 싱글쿼테이션을 3번 입력해주세요. '''

# 파이썬은 문장의 끝에 ;(세미콜론)을 사용하지 않는다. 
print("Hello Python")

#한줄에 여러 명령을 입력하는 경우에는 세미콜론으로 구분해야한다. 
print("한줄에 "); print("여러줄 쓰려면 "); print("세미콜론이 필요함")

#문자열은 아래와 같이 *를 여러번 반복해서 출력할 수 있다. 
print("="*30)
print("여러 변수 선언")
print("================================")

'''
좌측항은 변수, 우측항은 할당할 값으로 구분하여 선언 및 초기화한다.
또한 자료형은 별도로 명시하지 않는다. 값이 초기화될때 파이썬이 
판단하여 자료형을 결정해준다. 
'''
r, g, b = "Red", "Green", "Blue"
# 여러개의 변수를 출력할때 콤마로 구분하면된다. 
print(r, g, b)


print("================================")
print("정수형")
print("================================")
#순수한 숫자를 입력할때는 "을 붙이지 않는다. 
x = 2
y = 4
z = 8

#나누기 연산. 결과는 항상 실수(float)형으로 반환한다. 
print("x / y", x / y) 
print("z / y", z / y)  
#몫을 구하는 나누기 연산. 결과는 항상 정수(int)형으로 반환한다. 
print("x // y", x // y) 

# *는 곱셈연산. 결과는 8 
print("x * y", x * y)   
# **는 거듭제곱이므로 2의 4승. 결과는 16 
print("x ** y", x ** y)  
# pow()는 파이썬에서 제공하는 내장함수로 거듭제곱의 결과를 반환 
print("pow(x, y)", pow(x, y)) 
# x(2)의 y(4)승의 결과를 z(8)로 나눈 나머지를 반환 
print("pow(x, y, z)", pow(x, y, z))
# x를 y로 나눈 몫과 나머지를 Tuple(튜플)로 반환 
print("divmod(x, y)", divmod(x, y))